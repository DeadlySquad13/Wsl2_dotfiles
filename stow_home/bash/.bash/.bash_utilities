#!/bin/bash

# General.
# * Errors.
echoerr() {
  # Copy file descriptor #1 (stdout) to file descriptor #2 (stderr).
  echo "$@" 1>&2;
}

throwException() {
  echoerr "$@";
  return 1;
}

fail() {
  echoerror "$@1";
  exit 1;
}

# * Config.
config() {
  local configPath="$1";
  local command="$2";

  case $command in
    "-e" | "--edit")
      $EDITOR $configPath;
      ;;

    "-s" | "--source")
      source $configPath;
      echo "$configPath was sourced!";
      ;;

    "-d" | "--dir" | "--directory")
      local configDirectoryPath="$(dirname ${configPath})";
      cd "$configDirectoryPath";
      ;;

    *)
      return 1;
      ;;
  esac
}

bash() {
  local parameters="$@";
  config ~/.bashrc $parameters;
  if [ $? -eq 1 ]; then
    command bash $parameters;
  fi
}

task() {
  local parameters="$@";
  config ~/.taskrc $parameters;
  if [ $? -eq 1 ]; then
    command task $parameters;
  fi
}

tmux() {
  local parameters="$@";
  config ~/.tmux.conf $parameters;
  if [ $? -eq 1 ]; then
    command tmux $parameters;
  fi
}

# Ranger that will have a Q binding to exit and change your directory.
# @see {@Link https://superuser.com/a/1436077/1133669} for origin.
rangerWithFollow() {
  local IFS=$'\t\n'
  local tempfile="$(mktemp -t tmp.XXXXXX)"
  local ranger_cmd=(
    command
    ranger
    --cmd="map Q chain shell echo %d > \"$tempfile\"; quitall"
  )

  ${ranger_cmd[@]} "$@"
  if [[ -f "$tempfile" ]] && [[ "$(cat -- "$tempfile")" != "$PWD" ]]; then
    cd -- "$(cat -- "$tempfile")" || return
  fi
  command rm -f -- "$tempfile" 2>/dev/null
}

ranger() {
  local parameters="$@";
  config ~/.config/ranger/rc.conf $parameters;
  if [ $? -eq 1 ]; then
    rangerWithFollow $parameters;
  fi
}

rg() {
  local parameters="$@";
  config $RIPGREP_CONFIG_PATH $parameters;
  if [ $? -eq 1 ]; then
    command rg $parameters;
  fi
}

ssh() {
  local parameters="$@";
  # System config, there's also user config.
  config "/etc/ssh/ssh_config" $parameters;
  if [ $? -eq 1 ]; then
    command ssh $parameters;
  fi
}

printColors() {
  for i in {0..255}; do
    printf "\x1b[38;5;${i}mcolor%-5i\x1b[0m" $i;
    if ! (( ($i + 1 ) % 8 )); then
      echo;
    fi;
  done
}

isWsl() {
  if [[ -n "$IS_WSL" || -n "$WSL_DISTRO_NAME" ]]; then
    return 0
  else
    return 1
  fi
}

# Linux on Windows specific functions to interact with Windows.
if isWsl; then
  wsl() {
    local parameters="$@";
    config $WIN_HOME/.wslconfig $parameters;
    if [ $? -eq 1 ]; then
      command wsl $parameters;
    fi
  }

  wsltty() {
    local parameters="$@";
    config $WIN_LOCALAPPDATA/wsltty/home/$WIN_USER/.minttyrc $parameters;
    if [ $? -eq 1 ]; then
      command wsltty $parameters;
    fi
  }

  # Activating windows explorer from Wsl.
  explorer() {
    XYPlorer.exe "$@"
  }
fi

dotPng() {
  dot -Tpng $1.dot > $1.png && open $1.png
}

smug() {
  local command="$1";
  local parameters="$@";
  if [ "$command" = "start" ]; then
    command smug $parameters --attach;
  else
    command smug $parameters;
  fi 
}

# Timewarrior advanced aliases.
tw() {
  local parameters="$@";
  local command="$1";

  case $command in
    "-s")
      local param="$2"
      case $param in 
        ":w")
          timew summary \:week \:id;
          ;;
        ":lw")
          timew summary \:lastweek \:id;
          ;;
        *)
          # Should shift params and pass there.
          timew summary \:id;
          ;;
      esac
      ;;

    *)
      timew $parameters;
      ;;
  esac
}

#test() {
  #echo "$@"
  #while getopts ":a" opt; do
    #case $opt in
      #a)
        #echo "-a was triggered!" >&2
        #;;
      #\?)
        #echo "Invalid option: -$OPTARG" >&2
        #;;
    #esac
  #done
#}

# * Which.
# TODO: Support -a parameter of the which?
whichd() {
  local tmp="$(which $1)";
  echo ${tmp%$1};
}

cdwhich() {
  local whichSearchResult="$(whichd $1)";
  if [[ -z "$whichSearchResult" ]]; then
    throwException "${1} not found!"
  else
    cd $(whichd $1);
  fi
}


# Generate gitignore.
gengi() {
  curl -sL https://www.toptal.com/developers/gitignore/api/$@
}

# Go to corresponding KnowledgeBase section of a current directory (searches
#   symlinks).
goToKbd() {
  cd $(find . -maxdepth 1 -type l | rg 'KnowledgeBase__') && ll
}
