# --------------------------- Preliminary Notes. -----------------------------
# \ Tmux handles key combinations specifically.
# \ To set bindings with C-# you have to find out how it's represented in
# \ stdout. Use while tmux is active `cat`, and then press the key you want to
# \ bind.
# \ For example: C-6 is ^^.
# ----------------------------------------------------------------------------

# Settings.
# * Make delay shorter.
set -sg escape-time 0

# * Mouse support.
set -g mouse on

# Keybindings.
# * Source config.
bind S source-file ~/.tmux.conf \; #display "Tmux config was sourced!"

# * Prefix remapping.
# (Actually <c-space>)
unbind C-b
set-option -g prefix C-@ 
bind-key C-@ send-prefix

# Sessions.
unbind d
bind D detach-client

# - Rename.
unbind $
bind-key A command-prompt -I "#S" "rename-session -- '%%'"

# Windows.
bind ^^ last-window
# Open new window in current directory.
bind c new-window -c "#{pane_current_path}"
# - Close window without confirmation.
unbind &
bind-key d kill-window

# - Rename.
unbind ,
bind-key a command-prompt -I "#W" "rename-window -- '%%'"

# * Panes.
unbind x
unbind q
unbind Q

# - Cycle though panes.
# -> Select next pane.
unbind o
bind tab select-pane -t :.+
# -> Select previous pane.
# 'btab' is a shift-tab.
bind btab select-pane -t :.-

# - Display panes and jump to them.
bind o display-panes

# - Rotate panes inside window (cycle move).
unbind C-o
bind r rotate-window

# ! They work differently in comparison with vim. By orientation of a split
#   I understand an orientation of a line that splits window into two.
# - Horizontal split in current directory.
unbind '"'
bind s split-window -v -c "#{pane_current_path}"

# - Vertical split in current directory.
unbind %
bind v split-window -h -c "#{pane_current_path}"

# - Moving to pane.
bind h select-pane -L
bind l select-pane -R
bind j select-pane -D
bind k select-pane -U

# - Resizing pane.
bind left resize-pane -L 10
bind right resize-pane -R 10
bind down resize-pane -D 10
bind up resize-pane -U 10

# - Close pane without confirmation.
bind-key x kill-pane

# * Copy mode.
set-window-option -g mode-keys vi
set -g status-keys emacs

# - Enter copy mode.
unbind [
bind Escape copy-mode

# - Begin selection.
bind-key -T copy-mode-vi v send-keys -X begin-selection

# - Toggle rectangle (block) selection.
unbind-key -T copy-mode-vi r;
unbind-key -T copy-mode-vi R;
bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle

# - Copy selected text.
unbind -T copy-mode-vi Enter
#bind-key -T copy-mode-vi y send-keys -X copy-selection \; display-message "Copied to Clipboard"
bind-key -T copy-mode-vi y send-keys -X copy-pipe 'tmux showb | clip.exe' \; display-message "Copied to System Clipboard."

# - Copy selected text and put it where you left off.
# Doesn't paste until displayed message disappears...
#bind-key -T copy-mode-vi Y send-keys -X copy-selection-and-cancel \; paste-buffer \; display-message "Copied text and put it."
bind-key -T copy-mode-vi Y send-keys -X copy-selection-and-cancel \; paste-buffer

# - Paste copied text.
unbind ]
bind p paste-buffer

#set-option -s set-clipboard off
#bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel 'tmux showb |xsel -i' \; display-message "Copied to Clipboard"

######################
### DESIGN CHANGES ###
######################
# Preliminary Note: use 'colour' instead of 'color' even though the support for
# \ the second is being added, it's still not complete.
# For colors use
#   <https://www.ditig.com/256-colors-cheat-sheet> '256 color palette'.
#   <https://upload.wikimedia.org/wikipedia/commons/1/15/Xterm_256color_chart.svg> '256 color map'

# Settings.
# tmux-256color supports italics. 
set -g default-terminal "tmux-256color"
## Tell tmux that outside terminal supports true color.
set -ga terminal-overrides ",xterm-256color*:Tc"

## Statusbar
# @see{set-option in tmux documentation}.
# Also note that variables are working poorly with
#   `window-status-current-format` and `window-status-format`.
#   https://unix.stackexchange.com/questions/347327/why-does-tmux-not-pick-up-the-variables-sourced-in-my-tmux-conf
#
# It seems that F option on set parses variables non-recursively.
#   That leads to a rule of a thumb: first variables are just `set -goq ...`
#   everything that goes after: `set -goqF ...`.
# Also if you mix variables with predefined parsable formats in the final
#   option it will most likely not render the latest. Don't know why.
# -F option works on tmux options but oq - no.
#set -goq @dg-gap-colour colour0
set -goq @dg-gap-colour colour0

# set -goq @dg-bg-nvim-colour '#ebdbb2'
set -goq @dg-bg-colour '#ede2cc'
set -goq @dg-bg-dimmed-colour '#dcd1bb'
set -goq @dg-nvim-status-bg-colour colour0
set -goq @dg-pane-active-border colour136 # colour3 may also be ok.

set -g status-interval 1
set -g status-position bottom
set -gF status-style 'bg=#{@dg-nvim-status-bg-colour}'
set -g status-right-length 280
set -g status-left-length 280



# AREAS: LEFT           RIGHT
# PARTS: a b c ...  ... x y z
set -goq @dg-status-left-area-a-format ' #S '
set -goqF @dg-status-left-area-a '#[fg=colour3,bg=colour166,bold]#{@dg-status-left-area-a-format}#[fg=colour166,bg=colour4,nobold]'

set -qog @dg-status-left-area-b-format ' #(whoami) '
set -goqF @dg-status-left-area-b '#[fg=colour0,bg=colour4]#{@dg-status-left-area-b-format}#[fg=colour4,bg=colour250]'

set -goq @dg-status-left-area-c-format ' #I:#P '
set -goqF @dg-status-left-area-c '#[fg=colour4,bg=colour250]#{@dg-status-left-area-c-format}#[fg=colour250,bg=colour0]'

#[fg=#(cat #{socket_path}-\#{session_id}-vimbridge | awk -F "," "{print \$3}"),bg=#{@dg-gap-colour}]
# We get here the string: `bg=#aabbcc`.
set -goq @dg-nvim-status-left-area-c-bg '#(cat #{socket_path}-\#{session_id}-vimbridge | awk -F "," "{print \$3}")'

set -goq @dg-nvim-status-left-area '#(cat #{socket_path}-\#{session_id}-vimbridge)'
# Here we extract the color: `#aabbcc`. ! Unfortunately, arrows are shown outside of vim.
#set -goq @dg-nvim-status-left-area-c-bg-colour '#(cat #{socket_path}-\#{session_id}-vimbridge | awk -F "," "{print \$3}" | cut -b 4-)'
#set -goq @dg-nvim-status-left-area-c-fg-colour '#(cat #{socket_path}-\#{session_id}-vimbridge | grep -o "fg=#[0-9a-f]\{6\}" | tail -1 | cut -b 4-)'
set -goq @dg-nvim-status-left-area-c-fg '#(cat #{socket_path}-\#{session_id}-vimbridge | grep -o "fg=#[0-9a-f]\{6\}" | tail -1)'
#set -goq @dg-nvim-status-left-area-c-fg-colour '#(cat #{socket_path}-\#{session_id}-vimbridge | awk -F "," "{print \$3}" | cut -b 4-)'
# display-message -p '#(cat #{socket_path}-\#{session_id}-vimbridge | grep -o "fg=#[0-9a-f]\{6\}" | tail -1)'
set -goqF @dg-status-left-area-d '#[fg=#{@dg-gap-colour},#{@dg-nvim-status-left-area-c-bg}]#{@dg-nvim-status-left-area}'
# From theme:
# - left:
#[fg=colour253,bg=colour166,bold] [ #S ] #[fg=colour166,bg=colour4,nobold]#[fg=colour253,bg=colour4] #(whoami) #[fg=colour4,bg=colour250]#[fg=colour4,bg=colour250] #I:#P #[fg=colour250,bg=colour253,nobold]

set -goqF @dg-status-window-left-area '#[fg=colour4,bg=colour250]#{@dg-status-left-area-c-format}#[fg=colour250,bg=colour0]'

set -gF status-left '\
#{@dg-status-left-area-a}\
#{@dg-status-left-area-b}\
#{@dg-status-left-area-c}\
#{@dg-status-left-area-d}\
'

set -goq @dg-status-right-area-w  '#(cat #{socket_path}-\#{session_id}-vimbridge-R)'

set -goq @dg-status-right-area-x-format ' %H:%M:%S '
set -goqF @dg-status-right-area-x '#[fg=colour250,bg=colour0]#[fg=colour4,bg=colour250]#{@dg-status-right-area-x-format}'

set -goq @dg-status-right-area-y-format ' %d-%b-%y '
set -goqF @dg-status-right-area-y '#[fg=colour4,bg=colour250]#[fg=colour253,bg=colour4]#{@dg-status-right-area-y-format}'

set -goq @dg-status-right-area-z-format ' #H '
set -goqF @dg-status-right-area-z '#[fg=colour6,bg=colour4]#[fg=colour0,bg=colour6,bold]#{@dg-status-right-area-z-format}'

# - right:
#[fg=colour251,bg=colour253]#[fg=colour4,bg=colour250] %H:%M:%S #[fg=colour4,bg=colour250]#[fg=colour253,bg=colour4] %d-%b-%y #[fg=colour6,bg=colour4]#[fg=colour253,bg=colour6,bold] #H
set -gF status-right '\
#{@dg-status-right-area-w}\
#{@dg-status-right-area-x}\
#{@dg-status-right-area-y}\
#{@dg-status-right-area-z}\
'

# Set the foreground/background color for the active window
setw -g window-active-style fg=colour15,bg=colour235

# Set the foreground/background color for all other windows
setw -g window-style fg=colour245,bg=colour236


# # Panes.
# * Inactive.
# - Border.
set-option -g pane-border-style 'fg=colour6 bg=#{@dg-bg-dimmed-colour}'

# - Inner part.
# set-window-option -g window-style 'fg=colour239,bg=colour255'
set-window-option -g window-style 'fg=colour239,bg=#{@dg-bg-dimmed-colour}'

# * Active.
# - Border.
set-option -g pane-active-border-style 'fg=#{@dg-pane-active-border} bg=#{@dg-pane-active-border}'

# - Inner part.
# set-window-option -g window-active-style 'fg=colour239,bg=colour0'
set-window-option -g window-active-style 'fg=colour239,bg=#{@dg-bg-colour}'
#set-window-option -g window-status-current-fg magenta
#set-window-option -g window-status-current-bg black
# - Active pane.
#set -g pane-border-fg color1
#set -g pane-border-bg color81
#set -g pane-active-border-fg color163
#set -g pane-active-border-bg color230

## loud or quiet?
#set -g visual-activity off
#set -g visual-bell off
#set -g visual-silence off
#setw -g monitor-activity off
#set -g bell-action none

##  modes
#setw -g clock-mode-colour colour5
#setw -g mode-style 'fg=colour1 bg=colour18 bold'

## panes
#set -g pane-border-style 'fg=colour19 bg=colour0'
#set -g pane-active-border-style 'bg=colour0 fg=colour9'

set -g status-justify centre
setw -g window-status-current-style 'fg=colour2 bg=colour0 bold'
# They are separate variables just for set -gF later...
setw -g @dg-window-status-left-format '#I'
setw -g @dg-window-status-middle-format '#W'

# First color act as a fallback value if the variable is not calculated.
setw -gF @dg-window-status-format '#[fg=colour245]#[#{@dg-nvim-status-left-area-c-fg},bg=default]#{@dg-window-status-left-format}#[fg=colour245]:#[#{@dg-nvim-status-left-area-c-fg}]#{@dg-window-status-middle-format}#[fg=colour244]#F '
setw -gF window-status-format '#{@dg-window-status-format}'
setw -g window-status-current-format '#[fg=colour0,bg=default]#[fg=default,bg=#{@dg-gap-colour}] #I#[fg=colour245]:#[bg=colour0]#W#[fg=colour2]#F #[fg=colour0,bg=default]'

setw -g window-status-style 'fg=colour9 bg=colour18'

#setw -g window-status-bell-style 'fg=colour255 bg=colour1 bold'

## messages
#set -g message-style 'fg=colour232 bg=colour16 bold'

# Tpipeline.
set -g focus-events on
#set -g status-style bg=default

# List of plugins.
# * Installing.
#   - Add new plugin to ~/.tmux.conf with set -g @plugin '...'.
#   - Press *prefix* + I (capital i, as in Install) to fetch the plugin.
#   - You're good to go! The plugin was cloned to ~/.tmux/plugins/ dir and sourced.

# * Uninstalling.
#   - Remove (or comment out) plugin from the list.
#   - Press *prefix* + alt + u (lowercase u as in uninstall) to remove the plugin.
#   - All the plugins are installed to ~/.tmux/plugins/ so alternatively you can find plugin directory there and remove it.


set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'

# Saving sessions across reboots.
set -g @plugin 'tmux-plugins/tmux-resurrect'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf).
run '~/.tmux/plugins/tpm/tpm'

# vi:textwidth=0
